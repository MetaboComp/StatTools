% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute_all.R
\name{impute_all}
\alias{impute_all}
\title{imputation for 3 types of variables
1.numeric variables
2.factor variables without order: non_ordinal factor variables
3.factor variable with order: ordinal factor variables}
\usage{
impute_all(
  ordinal,
  non_ordinal,
  guess = NULL,
  forceZero = FALSE,
  method = c("PLS", "RF"),
  rfMeth = c("rf", "Rborist", "ranger"),
  nComp = 2,
  nCore,
  tol1 = 0.05,
  n1 = 15,
  tol2 = 0.025,
  n2 = 60
)
}
\arguments{
\item{ordinal}{A dataframe with ordinal variables and numeric variables}

\item{guess}{Initial guess (see mvImp; defaults to mvImp default)}

\item{forceZero}{Boolean for whether to force a lower imputation limit to zero (see mvImp; defaults to mvImp default)}

\item{method}{'PLS' or 'RF}

\item{rfMeth}{Which RF implementation to choose ('rf' (randomForest; default), 'ranger' or 'Rborist')}

\item{nComp}{Number of PLS components (defaults to 2)}

\item{nCore}{Number of slave processes (defaults to detectCores()-1)}

\item{tol1}{Tolerance in 1st iteration (defaults to 0.05)}

\item{n1}{MaxIter for 1st iteration (defaults to 15)}

\item{tol2}{Tolerance in 2nd iteration (defaults to 0.05)}

\item{n2}{MaxIter for 2nd iteration (defaults to 15)}

\item{non-ordinal}{A dataframe with non-ordinal variables}
}
\value{
A dataframe with imputed values
}
\description{
Preparation: To use this package, 4 steps need to be done beforehand:
}
\details{
Step 1: Made all variables that will be used a dataframe. For example, a data frame with name X

Step 2: Put ordinal variables and numeric variables in one dataframe. Put  non-ordinal variables in another data frame.
This is done manual because computer cannot decide which variables we vant to give order to.
!!! Note: the class of variables in these data frames should be only "factor" or "numeric". (Use the Transform_fac_num in the same package.)

Step 3: Code the ordinal factor variables properly!!!. For example, code it with alphabet or number that could show sequence.

Step 4: Make sure that the sequence of the levels for each factor variable become the "default sequence". (Use the Transform_fac_num in the same package.)
Example: a<-factor(c(1,2,3)). When levels(a), the out put is 1,2,3. This is the "default sequence" we want.
        a<-factor(c(1,2,3),levels=c("3","1","2")). When levels(a), the out put is 3,1,2. This is not "default sequence".
        a<-Transform_fac_num(factor(c(1,2,3),levels=c("3","1","2"))). When levels(a), the output is 1,2,3.
}
\examples{

install.packages("remotes")
library(remotes)
install_gitlab('CarlBrunius/MUVR')
library(MUVR)
factor_1<-factor(c(rep("a",8),rep("b",8),rep("c",8),rep("d",5)))
factor_2<-as.character(c(rep("f",5),rep("e",8),rep("h",5),rep("g",11)))
d<-cbind(Xotu[,1:7],factor_1,factor_2,Yotu)
d[29,10]=NA
d[28,9]=NA
d[27,8]=NA
d[25,6]=NA
d[24,5]=NA
d[23,4]=NA
d[22,3]=NA
d[21,2]=NA
d[20,1]=NA
d[20,2]=NA
e=Transform_fac_num(d)$dataframe
f<-impute_all(e[,1:8],
               e[,9:10])
f is the imputed data frame of d
}
